import { NextComponentType } from "next";
import { Config as NextReduxWrapperConfig, MakeStore, WrappedAppProps } from "next-redux-wrapper";
import { AppContext } from "next/app";
import * as React from "react";
import { Action, AnyAction } from "redux";
import { PersistConfig } from "redux-persist";
export declare type CustomPersistConfig<S> = Omit<PersistConfig<S>, "storage" | "key"> & Partial<Pick<PersistConfig<S>, "key">>;
export declare type Config = NextReduxWrapperConfig & {
    persistConfig?: CustomPersistConfig<any>;
    cookieConfig?: any;
};
export declare type FlushReduxStateToCookies = () => Promise<void>;
export declare const withReduxCookiePersist: (makeStore: MakeStore, config?: Config | undefined) => (App: NextComponentType | any) => {
    new (props: Readonly<WrappedAppProps>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<WrappedAppProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<WrappedAppProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<WrappedAppProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<WrappedAppProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<WrappedAppProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<WrappedAppProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: WrappedAppProps, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<WrappedAppProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<WrappedAppProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<WrappedAppProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<WrappedAppProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<WrappedAppProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<WrappedAppProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    getInitialProps: (appCtx: AppContext) => Promise<{
        isServer: boolean;
        initialState: any;
        initialProps: {};
    }>;
    contextType?: React.Context<any> | undefined;
};
declare module "next/dist/next-server/lib/utils" {
    interface NextPageContext<S = any, A extends Action = AnyAction> {
        /**
         * Provided by next-redux-cookie-wrapper: If the code is executed on the server and `ctx.req`
         * and `ctx.res` are set, this method will add a cookies header with the redux store's current
         * state to `ctx.res`.
         *
         * Note: This will only take effect if you redirect the client afterwards. Otherwise, do not
         * call this function â€“ the client will use the up-to-date serialized state contained in the
         * HTML response anyway and overwrite the cookies with it.
         */
        flushReduxStateToCookies: FlushReduxStateToCookies;
    }
}
