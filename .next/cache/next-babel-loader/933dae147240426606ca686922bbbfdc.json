{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Card from '../Card/card.component';\nimport Pagination from 'react-js-pagination';\nimport Select from 'react-select';\nimport customStyles from './gallery.styles';\nimport { connect } from 'react-redux';\nimport { setCurrentPage } from '../../src/redux/pagination/pagination.action';\nimport { setCurrentFilter } from '../../src/redux/filter/filter.action';\nimport { setCurrentSort } from '../../src/redux/sort/sort.action';\nimport { motion } from 'framer-motion';\n\nconst mapStateToProps = state => ({\n  currentFilter: state.filter.currentFilter,\n  sorted: state.sort.sorted,\n  activePage: state.pagination.activePage,\n  perPage: state.pagination.perPage,\n  pageRange: state.pagination.pageRange\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handlePageChange: pageNumber => dispatch(setCurrentPage(pageNumber)),\n  onSortChange: selectedOption => {\n    dispatch(setCurrentSort(selectedOption.value));\n    dispatch(setCurrentPage(1));\n  },\n  onSelectChange: selectedOption => {\n    if (selectedOption.value === 'All') {\n      return dispatch(setCurrentFilter(''));\n    } else {\n      dispatch(setCurrentFilter(selectedOption.value));\n      dispatch(setCurrentPage(1));\n    }\n  }\n});\n\nclass Gallery extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSelectChange\", selectedOption => {\n      if (selectedOption.value === 'All') {\n        setCurrentFilter('');\n      } else {\n        setCurrentFilter(selectedOption.value);\n        setCurrentPage(1);\n      }\n    });\n  }\n\n  render() {\n    const stagger = {\n      animate: {\n        transition: {\n          staggerChildren: 0.09\n        }\n      }\n    };\n    const {\n      currentFilter,\n      sorted,\n      activePage,\n      perPage,\n      pageRange,\n      onSortChange,\n      handlePageChange,\n      onSelectChange\n    } = this.props;\n    let filteredItems = this.props.props.items.filter(item => {\n      return item.categories[0].name.includes(currentFilter);\n    });\n\n    if (sorted === 'Lower Price') {\n      filteredItems.sort((a, b) => a.price - b.price);\n    } else if (sorted === 'Higher Price') {\n      filteredItems.sort((a, b) => b.price - a.price);\n    } else if (sorted === 'Newest') {\n      filteredItems.sort((a, b) => {\n        return new Date(b.date) - new Date(a.date);\n      });\n    }\n\n    const filterOptions = [{\n      value: 'All',\n      label: 'All'\n    }];\n    this.props.props.categories.map(category => {\n      filterOptions.push({\n        value: category.name,\n        label: category.name\n      });\n    });\n    const sortOptions = [{\n      value: 'Lower Price',\n      label: 'Lower Price'\n    }, {\n      value: 'Higher Price',\n      label: 'Higher Price'\n    }, {\n      value: 'Newest',\n      label: 'Newest'\n    }];\n    return __jsx(motion.div, {\n      className: \"gallery-container\"\n    }, __jsx(\"div\", {\n      className: \"filters\"\n    }, __jsx(\"div\", {\n      className: \"filter-selects\"\n    }, this.props.props.categories[0] ? __jsx(Select, {\n      styles: customStyles,\n      options: filterOptions,\n      onChange: onSelectChange,\n      placeholder: \"Category\",\n      isSearchable: false\n    }) : __jsx(\"option\", null, \"Loading\"), __jsx(Select, {\n      styles: customStyles,\n      options: sortOptions,\n      onChange: onSortChange,\n      placeholder: \"Sort\",\n      isSearchable: false\n    })), __jsx(\"span\", {\n      className: \"filters-range\"\n    }, __jsx(\"span\", {\n      className: \"filter-range-number\"\n    }, (activePage - 1) * perPage + 1), \"-\", __jsx(\"span\", {\n      className: \"filter-range-number\"\n    }, activePage * perPage > filteredItems.length ? filteredItems.length : activePage * perPage), \" out of\", __jsx(\"span\", {\n      className: \"filter-range-number\"\n    }, filteredItems.length), \" results\"), filteredItems.length > perPage ? __jsx(Pagination, {\n      activePage: activePage,\n      itemsCountPerPage: perPage,\n      totalItemsCount: filteredItems.length,\n      pageRangeDisplayed: pageRange,\n      onChange: handlePageChange.bind(this)\n    }) : ''), !this.props.props.items[0] ? __jsx(\"h1\", null, \"Loading\") : __jsx(motion.div, {\n      className: \"gallery\",\n      variants: stagger\n    }, filteredItems.slice((activePage - 1) * perPage, activePage * perPage).map((item, index) => {\n      // return <Link href='itemgallery/[item]' as='itemgallery' passHref><Card key={id} id={id} name={name} {...otherProps}/></Link>\n      return __jsx(Card, {\n        key: item.id,\n        item: item,\n        index: index\n      });\n    })));\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gallery);","map":null,"metadata":{},"sourceType":"module"}