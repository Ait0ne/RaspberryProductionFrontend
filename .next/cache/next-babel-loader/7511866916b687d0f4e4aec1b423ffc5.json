{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\bonaf\\\\Desktop\\\\Projects\\\\Ecommerce\\\\Malinka\\\\frontend\\\\malinka\\\\components\\\\stripe-button\\\\stripe-button.component.jsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\nimport API_URL from '../../routes';\nimport { connect } from 'react-redux';\nimport { clearCart as _clearCart } from '../../src/redux/cart/cart.actions';\n\nvar StripeCheckoutButton = function StripeCheckoutButton(_ref) {\n  var price = _ref.price,\n      currentUser = _ref.currentUser,\n      cartItems = _ref.cartItems,\n      clearCart = _ref.clearCart,\n      deliveryMethod = _ref.deliveryMethod,\n      deliveryAddress = _ref.deliveryAddress,\n      paymentMethod = _ref.paymentMethod;\n  var order = \"\".concat(cartItems.map(function (cartItem) {\n    return \"\".concat(cartItem.name, \": \").concat(cartItem.quantity, \"\\n\");\n  }), \" \\nTotal:\").concat(price, \"\\n    \\nPayment Method: \").concat(paymentMethod, \" \\n    \\nDelivery Method: \").concat(deliveryMethod, \" \\n\").concat(deliveryMethod === 'delivery' ? \"Delivery Address: \".concat(deliveryAddress.city, \", \").concat(deliveryAddress.address) : '');\n\n  var onToken = function onToken(token) {\n    fetch(\"\".concat(API_URL, \"/orders\"), {\n      method: 'post',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: priceForStripe,\n        Status: \"Pending\",\n        name: currentUser.email,\n        createdAt: new Date(),\n        OrderDetails: order,\n        token: token\n      })\n    }).then(function (response) {\n      console.log(response);\n\n      if (response.ok) {\n        clearCart();\n        alert('Payment successful');\n      } else {\n        alert('There was an issue with your payment.');\n      }\n    })[\"catch\"](function (error) {\n      console.log('Payment error: ', error);\n      alert('There was an issue with your payment.');\n    });\n  };\n\n  var priceForStripe = price * 100;\n  var publishablekey = 'pk_test_cjTqGCwCgH7H6f2eJRaVcr5R00XHFNsn39';\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      alignSelf: 'flex-end',\n      marginTop: '20px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, __jsx(StripeCheckout, {\n    label: \"Pay Now\",\n    name: \"TestShop\",\n    billingAddress: true,\n    shippingAddress: true,\n    description: \"Your total is \".concat(price),\n    amount: priceForStripe,\n    panelLabel: \"Pay Now\",\n    token: onToken,\n    stripeKey: publishablekey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }));\n};\n\n_c = StripeCheckoutButton;\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clearCart: function clearCart() {\n      return dispatch(_clearCart());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckoutButton\");","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/components/stripe-button/stripe-button.component.jsx"],"names":["React","StripeCheckout","axios","API_URL","connect","clearCart","StripeCheckoutButton","price","currentUser","cartItems","deliveryMethod","deliveryAddress","paymentMethod","order","map","cartItem","name","quantity","city","address","onToken","token","fetch","method","headers","body","JSON","stringify","amount","priceForStripe","Status","email","createdAt","Date","OrderDetails","then","response","console","log","ok","alert","error","publishablekey","display","alignSelf","marginTop","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport axios from 'axios';\r\nimport API_URL from '../../routes';\r\nimport {connect} from 'react-redux';\r\nimport {clearCart} from '../../src/redux/cart/cart.actions'\r\n\r\nconst StripeCheckoutButton = ( { price, currentUser, cartItems, clearCart, deliveryMethod, deliveryAddress, paymentMethod } ) => {\r\n    const order = `${cartItems.map(cartItem=>`${cartItem.name}: ${cartItem.quantity}\\n`)} \\nTotal:${price}\r\n    \\nPayment Method: ${paymentMethod} \r\n    \\nDelivery Method: ${deliveryMethod} \\n${deliveryMethod==='delivery'?`Delivery Address: ${deliveryAddress.city}, ${deliveryAddress.address}`:''}`\r\n    const onToken = token => {\r\n        fetch(`${API_URL}/orders`,{\r\n                method: 'post',\r\n                headers: {'Content-type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    amount: priceForStripe,\r\n                    Status: \"Pending\",\r\n                    name: currentUser.email,\r\n                    createdAt: new Date(),\r\n                    OrderDetails: order,\r\n                    token\r\n                })                \r\n        }).then(response => {\r\n            console.log(response)\r\n            if(response.ok){\r\n                clearCart()\r\n                alert('Payment successful')                \r\n            }\r\n                else {\r\n                    alert('There was an issue with your payment.')\r\n                }            \r\n        }).catch(error => {\r\n            console.log('Payment error: ', error)\r\n            alert('There was an issue with your payment.')\r\n        })\r\n    }\r\n\r\n    const priceForStripe = price * 100\r\n    \t\r\n    const publishablekey = 'pk_test_cjTqGCwCgH7H6f2eJRaVcr5R00XHFNsn39'\r\n    return (\r\n        <div style={{display: 'flex',alignSelf:'flex-end', marginTop:'20px'}}>\r\n            <StripeCheckout \r\n                label = 'Pay Now'\r\n                name = 'TestShop'\r\n                billingAddress\r\n                shippingAddress\r\n                description = {`Your total is ${price}`}\r\n                amount = {priceForStripe}\r\n                panelLabel='Pay Now'\r\n                token={onToken}\r\n                stripeKey={publishablekey}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch=> ({\r\n    clearCart: () => dispatch(clearCart())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton)"]},"metadata":{},"sourceType":"module"}