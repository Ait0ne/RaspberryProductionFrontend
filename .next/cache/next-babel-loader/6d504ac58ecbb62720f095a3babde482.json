{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, Fragment } from 'react';\nimport { useRouter } from 'next/router';\nimport API_URL from '../../routes';\nimport { addMultipleItems } from '../../src/redux/cart/cart.actions';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleUp, faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport Footer from '../../components/Footer/footer.component';\nimport Scrollbar from 'react-scrollbars-custom';\nimport ReviewForm from '../../components/Review/review.component';\nimport { motion } from 'framer-motion';\nconst easing = [.6, -.05, .01, .99];\nconst stagger = {\n  animate: {\n    transition: {\n      staggerChildren: 0.05\n    }\n  }\n};\nconst fadeInUp = {\n  initial: {\n    y: 60,\n    opacity: 0\n  },\n  animate: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      duration: .3,\n      ease: easing\n    }\n  }\n};\n\nconst ItemPage = ({\n  item,\n  addMultipleItems\n}) => {\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState(1);\n  const {\n    0: currentImage,\n    1: setCurrentImage\n  } = useState(0);\n  const {\n    0: comments,\n    1: setComments\n  } = useState(item.comments ? item.comments.slice(0).reverse() : []);\n\n  const onIncrease = () => {\n    setQuantity(quantity + 1);\n  };\n\n  const onDecrease = () => {\n    if (quantity === 1) {\n      null;\n    } else {\n      setQuantity(quantity - 1);\n    }\n  };\n\n  const addComments = comment => setComments([comment, ...comments]);\n\n  return __jsx(Fragment, null, __jsx(motion.div, {\n    className: \"item-details-container\",\n    exit: {\n      opacity: 0\n    },\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 0.8\n      }\n    }\n  }, console.log(item), __jsx(\"div\", {\n    className: \"item-details\"\n  }, __jsx(\"div\", {\n    className: \"item-details-gallery\"\n  }, __jsx(motion.div, {\n    className: \"item-details-main-image\"\n  }, __jsx(motion.img, {\n    initial: {\n      x: 200,\n      opacity: 0\n    },\n    animate: {\n      x: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.5\n      }\n    },\n    transition: {\n      delay: 0.2\n    },\n    alt: \"product-image\",\n    className: \"item-details-main-image-image\",\n    src: `${API_URL}${item.gallery[currentImage].url}`\n  })), __jsx(\"div\", {\n    className: \"item-details-thumbnails\"\n  }, item.gallery.slice(0, 3).map((image, index) => __jsx(\"img\", {\n    key: image.id,\n    className: \"item-details-thumbnails-image\",\n    alt: \"image-thumbnail\",\n    src: `${API_URL}${image.formats.thumbnail.url}`,\n    onClick: () => setCurrentImage(index)\n  })))), __jsx(\"div\", {\n    className: \"item-details-text-content\"\n  }, __jsx(\"div\", {\n    className: \"item-details-name\"\n  }, item.name), __jsx(\"div\", {\n    className: \"item-details-price\"\n  }, __jsx(\"span\", {\n    className: \"item-details-previous-price\"\n  }, item.price * 1.2), __jsx(\"span\", {\n    className: \"item-details-current-price\"\n  }, item.price)), __jsx(\"div\", {\n    className: \"item-details-description\"\n  }, item.description), __jsx(\"div\", {\n    className: \"item-details-categories\"\n  }, \"CATEGORIES: \", item.categories.map((category, index) => __jsx(\"span\", {\n    key: index\n  }, category.name, \" \"))), __jsx(\"div\", {\n    className: \"item-details-add-to-cart\"\n  }, __jsx(\"div\", {\n    className: \"item-details-quantity\"\n  }, __jsx(\"div\", {\n    className: \"item-details-quantity-text\"\n  }, quantity), __jsx(\"div\", {\n    className: \"item-details-quantity-navigation\"\n  }, __jsx(\"div\", {\n    className: \"item-details-quantity-arrows\",\n    onClick: onIncrease\n  }, __jsx(FontAwesomeIcon, {\n    icon: faAngleUp,\n    size: \"lg\"\n  })), __jsx(\"div\", {\n    className: \"item-details-quantity-arrows\",\n    onClick: onDecrease\n  }, __jsx(FontAwesomeIcon, {\n    icon: faAngleDown,\n    size: \"lg\"\n  })))), __jsx(\"button\", {\n    type: \"button\",\n    className: \"item-details-add-to-cart-button\",\n    onClick: () => addMultipleItems([item, quantity])\n  }, \"ADD TO CART\")), __jsx(\"div\", {\n    className: \"item-comment-section\"\n  }, __jsx(\"span\", {\n    className: \"item-comment-section-title\"\n  }, \"Reviews:\"), comments.length ? __jsx(Scrollbar, {\n    style: {\n      height: '300px',\n      width: '100%'\n    }\n  }, comments.map(comment => {\n    return __jsx(\"div\", {\n      key: comment.id,\n      className: \"comment-text\"\n    }, __jsx(\"div\", {\n      className: \"item-comment-name\"\n    }, comment.name), __jsx(\"div\", {\n      className: \"item-comment-date\"\n    }, comment.date), __jsx(\"div\", {\n      className: \"item-comment-text\"\n    }, comment.text));\n  })) : __jsx(\"div\", {\n    className: \"no-comments\"\n  }, \"There are no reviews for this item yet.\"), __jsx(\"div\", {\n    className: \"review-container\"\n  }, __jsx(ReviewForm, {\n    item: item,\n    addComments: addComments\n  })))))), __jsx(Footer, null));\n};\n\nItemPage.getInitialProps = async ({\n  query\n}) => {\n  const resBouqet = await fetch(`${API_URL}/bouquets/${query.item}`);\n  const dataBouqet = await resBouqet.json();\n  return {\n    item: dataBouqet\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addMultipleItems: item => dispatch(addMultipleItems(item))\n}); // export async function getServerSideProps(){\n//         const resBouqet = await fetch(`${API_URL}/bouquets/12`)\n//         const item = await resBouqet.json()\n//         return {props: {item}}\n//     }    \n\n\nexport default connect(null, mapDispatchToProps)(ItemPage);","map":null,"metadata":{},"sourceType":"module"}