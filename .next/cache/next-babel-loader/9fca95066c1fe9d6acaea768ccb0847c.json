{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/messaging';\nconst config = {\n  apiKey: \"AIzaSyABugTRykVjU3cO3nkANbnArtyZ_TPix1Q\",\n  authDomain: \"raspberry-dacc1.firebaseapp.com\",\n  databaseURL: \"https://raspberry-dacc1.firebaseio.com\",\n  projectId: \"raspberry-dacc1\",\n  storageBucket: \"raspberry-dacc1.appspot.com\",\n  messagingSenderId: \"435336134829\",\n  appId: \"1:435336134829:web:36258d0b8bdb9bf9810624\",\n  measurementId: \"G-E4XKDDZNWV\"\n};\nexport const createUserProfileDocument = async (userAuth, data) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, data));\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nexport const Fire = () => {\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n  }\n};\nexport const sendMessage = async (message, channel, token) => {\n  const channelRef = firestore.collection('Chat').doc(`${channel}`);\n  const snapshot = await channelRef.get();\n\n  if (!snapshot.exists) {\n    await channelRef.set({\n      name: channel\n    });\n  }\n\n  const chatRef = firestore.collection('Chat').doc(`${channel}`).collection(`messages`).doc(`${new Date()}`);\n\n  try {\n    await channelRef.update({\n      userMessages: true,\n      text: message,\n      time: new Date()\n    });\n    await chatRef.set({\n      id: new Date(),\n      text: message,\n      createdAt: new Date().getTime(),\n      user: {\n        id: channel\n      }\n    });\n  } catch (err) {\n    alert(err.message);\n  }\n\n  if (token) {\n    const pushMessage = {\n      \"token\": \"dpgLNzuETNuJzqayROO8hI:APA91bFCjE-Ku5FYHbJxdSc-5UtFp5v6tNAcHB1Kf88w58IdON_vuhySeWwuBGwoCdnpFyBJcYSJAowCNsFoLV9lj0ZRaQr3HnLhQmekh6qienx7aGImyONwU0nssj14kmdpHE-63SSa\",\n      \"notification\": {\n        \"title\": `${channel}`,\n        \"body\": `${message}`\n      }\n    };\n    const response = await fetch(`http://localhost:5000/push`, {\n      method: 'post',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: pushMessage,\n        token\n      })\n    });\n\n    response => console.log(response);\n  }\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInwithGoogle = () => auth.signInWithPopup(provider);\nconst facebookProvider = new firebase.auth.FacebookAuthProvider();\nfacebookProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider).catch(err => alert('Your account is associated with a different Login method!'));\nexport default firebase;","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","data","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","apps","length","initializeApp","Fire","sendMessage","channel","token","channelRef","collection","name","chatRef","update","userMessages","text","time","id","getTime","user","alert","pushMessage","response","fetch","method","headers","body","JSON","stringify","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInwithGoogle","signInWithPopup","facebookProvider","FacebookAuthProvider","signInWithFacebook","catch"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/messaging';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyABugTRykVjU3cO3nkANbnArtyZ_TPix1Q\",\r\n    authDomain: \"raspberry-dacc1.firebaseapp.com\",\r\n    databaseURL: \"https://raspberry-dacc1.firebaseio.com\",\r\n    projectId: \"raspberry-dacc1\",\r\n    storageBucket: \"raspberry-dacc1.appspot.com\",\r\n    messagingSenderId: \"435336134829\",\r\n    appId: \"1:435336134829:web:36258d0b8bdb9bf9810624\",\r\n    measurementId: \"G-E4XKDDZNWV\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth,data) => {\r\n    if (!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapshot = await userRef.get();\r\n\r\n    if (!snapshot.exists) {\r\n        const {displayName,email} = userAuth;\r\n        const createdAt = new Date()\r\n        try{\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...data,\r\n            })\r\n        \r\n        } catch (err) {\r\n            console.log('error creating user', err.message)\r\n        }\r\n    }\r\n    return userRef;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n\r\n}\r\n\r\n\r\nexport const Fire = () => {\r\n        if (!firebase.apps.length) {\r\n            firebase.initializeApp(config)\r\n        }\r\n\r\n} \r\n\r\nexport const sendMessage = async (message, channel, token) => {\r\n\r\n    const channelRef = firestore.collection('Chat').doc(`${channel}`)\r\n    const snapshot = await channelRef.get();\r\n\r\n    if (!snapshot.exists) {\r\n        await channelRef.set({name:channel})\r\n    }\r\n    const chatRef = firestore.collection('Chat').doc(`${channel}`).collection(`messages`).doc(`${new Date()}`)\r\n    try {\r\n        await channelRef.update({\r\n            userMessages:true,\r\n            text:message,\r\n            time:new Date()\r\n        })\r\n        await chatRef.set({\r\n            id:new Date(),\r\n            text:message,\r\n            createdAt: new Date().getTime(),\r\n            user: {id:channel}\r\n        })\r\n    } catch (err) {\r\n        alert(err.message)\r\n    }\r\n    if (token) {\r\n        const pushMessage = {\r\n            \"token\" : \"dpgLNzuETNuJzqayROO8hI:APA91bFCjE-Ku5FYHbJxdSc-5UtFp5v6tNAcHB1Kf88w58IdON_vuhySeWwuBGwoCdnpFyBJcYSJAowCNsFoLV9lj0ZRaQr3HnLhQmekh6qienx7aGImyONwU0nssj14kmdpHE-63SSa\",\r\n            \"notification\" : {\r\n                \"title\": `${channel}`,\r\n                \"body\": `${message}`\r\n            }\r\n        }\r\n        const response = await fetch(`http://localhost:5000/push`, {\r\n            method: 'post',\r\n            headers: {'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                message: pushMessage,\r\n                token\r\n            })\r\n            })\r\n        response => console.log(response)\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore =firebase.firestore();\r\n\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt:'select_account'});\r\nexport const signInwithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nconst facebookProvider = new firebase.auth.FacebookAuthProvider();\r\nfacebookProvider.setCustomParameters({prompt:'select_account'});\r\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider)\r\n.catch(err => alert('Your account is associated with a different Login method!'))\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}