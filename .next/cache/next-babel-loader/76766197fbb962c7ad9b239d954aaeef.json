{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bonaf\\\\Desktop\\\\Projects\\\\Ecommerce\\\\Malinka\\\\frontend\\\\malinka\\\\components\\\\cart-dropdown\\\\cart-dropdown.component.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport Router from 'next/router';\nimport { connect } from 'react-redux';\nimport { toggleCartHidden } from '../../src/redux/cart/cart.actions';\nimport ScrollBar from 'react-scrollbars-custom';\nimport CartItem from '../cart-item/cart-item.component';\nimport ClickOutside from '../ClickOutside/ClickOutside.component';\nimport { motion } from 'framer-motion';\n\nconst CartDropdown = ({\n  cartItems,\n  toggleCartHidden,\n  total,\n  deviceHeight,\n  deviceWidth\n}) => {\n  return __jsx(motion.div, {\n    initial: \"initial\",\n    animate: \"animate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, console.log(deviceWidth, deviceHeight), __jsx(ClickOutside, {\n    onClick: () => toggleCartHidden(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, __jsx(motion.div, {\n    className: \"cart-dropdown\",\n    initial: {\n      height: '0px'\n    },\n    animate: {\n      height: `${deviceWidth < 769 ? `${deviceHeight}px` : '340px'}`,\n      transition: {\n        duration: 0.3\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, __jsx(ScrollBar, {\n    style: {\n      height: '280px',\n      width: '240px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"cart-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 21\n    }\n  }, cartItems.length ? cartItems.map(cartItem => __jsx(CartItem, {\n    key: cartItem.id,\n    cartItem: cartItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 55\n    }\n  })) : __jsx(\"span\", {\n    className: \"empty-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 29\n    }\n  }, \"Your cart is empty\"))), __jsx(\"span\", {\n    className: \"cart-dropdown-total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  }, \"Total: $\", total), __jsx(\"button\", {\n    className: \"checkout-button\",\n    type: \"button\",\n    onClick: () => {\n      Router.push('/checkout');\n      toggleCartHidden();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, \"GO TO CHECKOUT\"))));\n};\n\nconst mapStateToProps = state => ({\n  cartItems: state.cart.cartItems,\n  total: state.cart.cartItems.reduce((sum, cartItem) => sum + cartItem.price * cartItem.quantity, 0)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleCartHidden: () => dispatch(toggleCartHidden())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartDropdown);","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/components/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","useEffect","useRef","useState","Router","connect","toggleCartHidden","ScrollBar","CartItem","ClickOutside","motion","CartDropdown","cartItems","total","deviceHeight","deviceWidth","console","log","height","transition","duration","width","length","map","cartItem","id","push","mapStateToProps","state","cart","reduce","sum","price","quantity","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport Router from 'next/router';\r\nimport {connect} from 'react-redux';\r\nimport {toggleCartHidden}  from '../../src/redux/cart/cart.actions';\r\nimport ScrollBar from 'react-scrollbars-custom';\r\nimport CartItem from '../cart-item/cart-item.component';\r\nimport ClickOutside from '../ClickOutside/ClickOutside.component'\r\nimport {motion} from 'framer-motion';\r\n\r\nconst CartDropdown = ({cartItems,toggleCartHidden, total, deviceHeight, deviceWidth}) => {\r\n\r\n    return (\r\n\r\n        <motion.div initial='initial' animate='animate'>\r\n            {console.log(deviceWidth, deviceHeight)}\r\n        <ClickOutside onClick={()=> toggleCartHidden()}>\r\n            <motion.div className='cart-dropdown'\r\n                initial={{height:'0px'}}\r\n                animate={{height:`${deviceWidth<769?`${deviceHeight}px`:'340px'}`, transition:{duration: 0.3}}}\r\n            >\r\n                <ScrollBar  style={{height:'280px', width: '240px'}}>\r\n                    <div className='cart-items' >\r\n                        {   cartItems.length ?\r\n                            cartItems.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem}/>)\r\n                            : \r\n                            <span className='empty-message'>Your cart is empty</span>\r\n                        }\r\n                    </div>\r\n                </ScrollBar>\r\n                    <span className='cart-dropdown-total'>Total: ${total}</span>\r\n                <button \r\n                className='checkout-button' \r\n                type='button'\r\n                onClick={() => {\r\n                    Router.push('/checkout')\r\n                    toggleCartHidden()\r\n                }}\r\n                >\r\n                    GO TO CHECKOUT\r\n                </button> \r\n\r\n            </motion.div>\r\n        </ClickOutside>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    cartItems: state.cart.cartItems,\r\n    total: state.cart.cartItems.reduce((sum, cartItem) => \r\n    sum + cartItem.price*cartItem.quantity, 0\r\n    )\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleCartHidden: () => dispatch(toggleCartHidden())\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CartDropdown);"]},"metadata":{},"sourceType":"module"}