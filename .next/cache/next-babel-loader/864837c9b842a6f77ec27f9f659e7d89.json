{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === cartItemToAdd.id ? _objectSpread(_objectSpread({}, cartItem), {}, {\n      quantity: cartItem.quantity + 1\n    }) : cartItem);\n  }\n\n  return [...cartItems, _objectSpread(_objectSpread({}, cartItemToAdd), {}, {\n    quantity: 1\n  })];\n};\nexport const addMultipleItemsToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd[0].id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === cartItemToAdd[0].id ? _objectSpread(_objectSpread({}, cartItem), {}, {\n      quantity: cartItem.quantity + cartItemToAdd[1]\n    }) : cartItem);\n  }\n\n  return [...cartItems, _objectSpread(_objectSpread({}, cartItemToAdd[0]), {}, {\n    quantity: cartItemToAdd[1]\n  })];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems;\n  }\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? _objectSpread(_objectSpread({}, cartItem), {}, {\n    quantity: cartItem.quantity - 1\n  }) : cartItem);\n};","map":null,"metadata":{},"sourceType":"module"}