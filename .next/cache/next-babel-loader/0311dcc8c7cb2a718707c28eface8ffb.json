{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bonaf\\\\Desktop\\\\Projects\\\\Ecommerce\\\\Malinka\\\\frontend\\\\malinka\\\\components\\\\Layout\\\\layout.component.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment } from 'react';\nimport Header from '../Header/header.component';\nimport Head from 'next/head';\nimport { connect } from 'react-redux';\nimport { auth, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { setCurrentUser } from '../../src/redux/user/user.action';\nimport { setChannel, setMessages } from '../../src/redux/chat/chat.actions';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nclass Layout extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"unsubscribeFromAuth\", null);\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser,\n      setMessages,\n      channel,\n      setChannel\n    } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser(_objectSpread({\n            id: snapShot.id\n          }, snapShot.data()));\n        });\n      }\n\n      ;\n    });\n\n    if (channel === 0) {\n      setChannel(new Date());\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n    getMessages();\n  }\n\n  render() {\n    const {\n      setMessages\n    } = this.props;\n\n    const getMessages = async channel => {\n      if (!firebase.apps.length) {\n        firebase.initializeApp({\n          apiKey: \"AIzaSyABugTRykVjU3cO3nkANbnArtyZ_TPix1Q\",\n          authDomain: \"raspberry-dacc1.firebaseapp.com\",\n          databaseURL: \"https://raspberry-dacc1.firebaseio.com\",\n          projectId: \"raspberry-dacc1\",\n          storageBucket: \"raspberry-dacc1.appspot.com\",\n          messagingSenderId: \"435336134829\",\n          appId: \"1:435336134829:web:36258d0b8bdb9bf9810624\",\n          measurementId: \"G-E4XKDDZNWV\"\n        });\n      }\n\n      const messages = [];\n      firebase.firestore().collection('Chat').doc(`${channel}`).collection(`messages`).where('message', '>', '').onSnapshot(docs => {\n        docs.forEach(function (doc) {\n          messages.push(doc.data());\n        });\n      });\n      return messages;\n    };\n\n    setMessages(getMessages(channel));\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, __jsx(\"link\", {\n      href: `https://fonts.googleapis.com/css2?family=Lora:ital@0;1&family=Open+Sans:wght@400;600;700&display=swap`,\n      rel: \"stylesheet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }), __jsx(\"link\", {\n      href: `https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700;800&display=swap`,\n      rel: \"stylesheet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1, shrink-to-fit=no\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }), __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: \"#425566\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }), __jsx(\"meta\", {\n      name: \"Description\",\n      content: \"\\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u0441\\u0430\\u0439\\u0442\\u0430\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }), __jsx(\"meta\", {\n      httpEquiv: \"Content-Type\",\n      content: \"text/html; charset=utf-8\",\n      charSet: \"utf-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    })), __jsx(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, this.props.children));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser,\n  channel: state.chat.channel\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user)),\n  setMessages: messages => dispatch(setMessages(messages)),\n  setChannel: channel => dispatch(setChannel(channel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/components/Layout/layout.component.jsx"],"names":["React","Fragment","Header","Head","connect","auth","createUserProfileDocument","setCurrentUser","setChannel","setMessages","firebase","Layout","Component","componentDidMount","channel","props","unsubscribeFromAuth","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","Date","componentWillUnmount","getMessages","render","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","messages","firestore","collection","doc","where","docs","forEach","push","children","mapStateToProps","state","currentUser","user","chat","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport Header from '../Header/header.component';\r\nimport Head from 'next/head'\r\nimport {connect} from 'react-redux';\r\nimport {auth, createUserProfileDocument} from '../../firebase/firebase.utils';\r\nimport { setCurrentUser } from '../../src/redux/user/user.action';\r\nimport {setChannel,setMessages} from '../../src/redux/chat/chat.actions'\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n\r\nclass Layout extends React.Component  {\r\n\r\n\r\n\r\n    unsubscribeFromAuth = null;\r\n\r\n    componentDidMount() {\r\n        const {setCurrentUser, setMessages, channel, setChannel} = this.props;\r\n        \r\n        this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth =>{\r\n            if (userAuth) {\r\n                const userRef = await createUserProfileDocument(userAuth);\r\n                userRef.onSnapshot(snapShot => {\r\n                    setCurrentUser({\r\n                        id: snapShot.id,\r\n                        ...snapShot.data()\r\n                    })\r\n                })\r\n            };\r\n\r\n        })\r\n        if (channel===0) {\r\n            setChannel(new Date())\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribeFromAuth();\r\n        getMessages();\r\n    }\r\n\r\n\r\n    render() {\r\n        const {setMessages} = this.props\r\n\r\n        const getMessages = async (channel) => {\r\n            if (!firebase.apps.length) {\r\n                firebase.initializeApp({\r\n                    apiKey: \"AIzaSyABugTRykVjU3cO3nkANbnArtyZ_TPix1Q\",\r\n                    authDomain: \"raspberry-dacc1.firebaseapp.com\",\r\n                    databaseURL: \"https://raspberry-dacc1.firebaseio.com\",\r\n                    projectId: \"raspberry-dacc1\",\r\n                    storageBucket: \"raspberry-dacc1.appspot.com\",\r\n                    messagingSenderId: \"435336134829\",\r\n                    appId: \"1:435336134829:web:36258d0b8bdb9bf9810624\",\r\n                    measurementId: \"G-E4XKDDZNWV\"\r\n                })\r\n            }\r\n            const messages=[]        \r\n            \r\n\r\n            firebase.firestore().collection('Chat').doc(`${channel}`).collection(`messages`).where('message','>','' )\r\n            .onSnapshot((docs) => {\r\n                \r\n                docs.forEach(function(doc) {\r\n                    messages.push(doc.data());\r\n                });    \r\n                       \r\n            })\r\n            return messages\r\n            \r\n        }\r\n\r\n        setMessages(getMessages(channel))\r\n    \r\n\r\n\r\n        \r\n\r\n\r\n\r\n        return (\r\n            <Fragment >\r\n                <Head>\r\n                    <link href={`https://fonts.googleapis.com/css2?family=Lora:ital@0;1&family=Open+Sans:wght@400;600;700&display=swap`} rel=\"stylesheet\"/>\r\n                    <link href={`https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700;800&display=swap`} rel=\"stylesheet\"/>\r\n                    \r\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\r\n                    <meta name=\"theme-color\" content=\"#425566\"/>\r\n                    <meta name=\"Description\" content=\"описание сайта\"/>\r\n                    <meta httpEquiv=\"Content-Type\" content=\"text/html; charset=utf-8\" charSet=\"utf-8\"/>\r\n                </Head>\r\n                <Header />\r\n                <div className='main'>{this.props.children}</div>\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentUser: state.user.currentUser,\r\n    channel: state.chat.channel\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: user => dispatch(setCurrentUser(user)),\r\n    setMessages: messages => dispatch(setMessages(messages)),\r\n    setChannel: channel => dispatch(setChannel(channel))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Layout);"]},"metadata":{},"sourceType":"module"}