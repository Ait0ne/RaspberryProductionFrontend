{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\bonaf\\\\Desktop\\\\Projects\\\\Ecommerce\\\\Malinka\\\\frontend\\\\malinka\\\\pages\\\\payment.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, Fragment } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport CheckoutItem from '../components/CheckoutItem/checkout-item.component';\nimport StripeButton from '../components/stripe-button/stripe-button.component';\nimport Footer from '../components/Footer/footer.component';\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var currentUser = _ref.currentUser,\n      cartItems = _ref.cartItems,\n      total = _ref.total;\n\n  var _useState = useState(''),\n      payMethod = _useState[0],\n      setPayMethod = _useState[1];\n\n  useEffect(function () {\n    if (!currentUser) {\n      Router.back();\n    }\n  });\n\n  var onMethodFormChange = function onMethodFormChange(event) {\n    setPayMethod(event.target.value);\n  };\n\n  return __jsx(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, console.log(payMethod), __jsx(\"div\", {\n    className: \"checkout-page\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"checkout-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"header-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    className: \"header-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    className: \"header-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, \"Quantity\")), __jsx(\"div\", {\n    className: \"header-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"  Price\")), __jsx(\"div\", {\n    className: \"header-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  })), cartItems.map(function (cartItem) {\n    return __jsx(CheckoutItem, {\n      key: cartItem.id,\n      cartItem: cartItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    });\n  }), __jsx(\"div\", {\n    className: \"total\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, \"Total: $\", total)), __jsx(\"div\", {\n    className: \"payment-method-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    className: \"payment-method-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, \"Choose payment method\"), __jsx(\"form\", {\n    className: \"payment-method-form\",\n    onChange: onMethodFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"cash\",\n    name: \"payment-method\",\n    className: \"payment-method-radio\",\n    id: \"payment-method-cash\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }), __jsx(\"label\", {\n    \"for\": \"payment-method-cash\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \"Pay with Cash\"), __jsx(\"input\", {\n    type: \"radio\",\n    value: \"card\",\n    name: \"payment-method\",\n    className: \"payment-method-radio\",\n    id: \"payment-method-card\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }), __jsx(\"label\", {\n    \"for\": \"payment-method-card\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, \"Pay online using card\"))), __jsx(StripeButton, {\n    currentUser: currentUser,\n    price: total,\n    cartItems: cartItems,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  })), __jsx(Footer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(PaymentPage, \"sQn9pDb6pN0gSUS6d/e9F4g0vtA=\");\n\n_c = PaymentPage;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cartItems: state.cart.cartItems,\n    currentUser: state.user.currentUser,\n    total: state.cart.cartItems.reduce(function (sum, cartItem) {\n      return sum + cartItem.price * cartItem.quantity;\n    }, 0)\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(PaymentPage));\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/pages/payment.js"],"names":["React","useEffect","useState","Fragment","Router","withRouter","connect","CheckoutItem","StripeButton","Footer","PaymentPage","currentUser","cartItems","total","payMethod","setPayMethod","back","onMethodFormChange","event","target","value","console","log","map","cartItem","id","mapStateToProps","state","cart","user","reduce","sum","price","quantity"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, Fragment} from 'react'\r\nimport Router, {withRouter} from 'next/router';\r\nimport {connect} from 'react-redux';\r\nimport CheckoutItem from '../components/CheckoutItem/checkout-item.component'\r\nimport StripeButton from '../components/stripe-button/stripe-button.component'\r\nimport Footer from '../components/Footer/footer.component'\r\nconst PaymentPage =({currentUser, cartItems, total}) => {\r\n    const [payMethod, setPayMethod] = useState('')\r\n    useEffect(()=>{\r\n        if (!currentUser) {\r\n            Router.back()\r\n        }\r\n    })\r\n\r\n    const onMethodFormChange = (event) => {\r\n        setPayMethod(event.target.value)\r\n    }\r\n    return (\r\n        \r\n        <Fragment>\r\n        {console.log(payMethod)}\r\n        <div className='checkout-page'>\r\n            <div className='checkout-header'>\r\n                <div className='header-block'>\r\n                    \r\n                </div>\r\n                <div className='header-block'>\r\n                    \r\n                </div>\r\n                <div className='header-block'>\r\n                    <span>Quantity</span>\r\n                </div>\r\n                <div className='header-block'>\r\n                    <span>  Price</span>\r\n                </div>\r\n                <div className='header-block'>\r\n                    \r\n                </div>\r\n            </div>\r\n            {\r\n                cartItems.map(cartItem => \r\n                    <CheckoutItem key={cartItem.id} cartItem={cartItem}/>\r\n                    )\r\n            }\r\n            <div className='total'>\r\n                <span>Total: ${total}</span>\r\n            </div>\r\n            <div className='payment-method-container'>  \r\n                <p className='payment-method-title'>Choose payment method</p>\r\n                <form className='payment-method-form' onChange={onMethodFormChange}>\r\n                    <input type='radio' value='cash' name='payment-method' className='payment-method-radio' id = 'payment-method-cash'/>\r\n                    <label for='payment-method-cash'>Pay with Cash</label>\r\n                    <input type='radio' value='card' name='payment-method' className='payment-method-radio' id = 'payment-method-card'/>\r\n                    <label for='payment-method-card'>Pay online using card</label>\r\n                </form>\r\n            </div>\r\n            <StripeButton currentUser={currentUser} price={total} cartItems={cartItems}/>\r\n        </div>\r\n        <Footer/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    cartItems: state.cart.cartItems,\r\n    currentUser: state.user.currentUser,\r\n    total: state.cart.cartItems.reduce((sum, cartItem) => \r\n    sum + cartItem.price*cartItem.quantity, 0\r\n    )\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps)(PaymentPage));"]},"metadata":{},"sourceType":"module"}