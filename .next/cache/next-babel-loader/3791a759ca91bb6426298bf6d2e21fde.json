{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\bonaf\\\\Desktop\\\\Projects\\\\Ecommerce\\\\Malinka\\\\frontend\\\\malinka\\\\pages\\\\payment.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport CartItem from '../components/cart-item/cart-item.component';\nimport StripeButton from '../components/stripe-button/stripe-button.component';\nimport Footer from '../components/Footer/footer.component';\nimport API_URL from '../routes';\nimport { clearCart as _clearCart } from '../src/redux/cart/cart.actions';\nimport ScrollBar from 'react-scrollbars-custom';\nimport FormInput from '../components/FormInput/formInput.component';\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var currentUser = _ref.currentUser,\n      cartItems = _ref.cartItems,\n      total = _ref.total,\n      clearCart = _ref.clearCart;\n\n  var _useState = useState(''),\n      payMethod = _useState[0],\n      setPayMethod = _useState[1];\n\n  var _useState2 = useState(''),\n      deliveryMethod = _useState2[0],\n      setDeliveryMethod = _useState2[1];\n\n  var _useState3 = useState({\n    city: '',\n    address: ''\n  }),\n      deliveryAddress = _useState3[0],\n      setDeliveryAddress = _useState3[1];\n\n  var _useState4 = useState(''),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(true),\n      hiddenAddressForm = _useState5[0],\n      setHiddenAddressForm = _useState5[1]; // useEffect(()=>{\n  //     if (!currentUser) {\n  //         Router.back()\n  //     }\n  // })\n\n\n  var onMethodFormChange = function onMethodFormChange(event) {\n    setPayMethod(event.target.value);\n  };\n\n  var onDeliveryFormChange = function onDeliveryFormChange(event) {\n    setDeliveryMethod(event.target.value);\n  };\n\n  var onDeliveryAddressChange = function onDeliveryAddressChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setDeliveryAddress(_objectSpread(_objectSpread({}, deliveryAddress), {}, _defineProperty({}, name, value)));\n  };\n\n  var onAddressSubmit = function onAddressSubmit(event) {\n    event.preventDefault();\n    setAddress({\n      city: deliveryAddress.city,\n      address: deliveryAddress.address\n    });\n    setHiddenAddressForm(true);\n  };\n\n  var onCreateOrder = function onCreateOrder() {\n    var order = \"\".concat(cartItems.map(function (cartItem) {\n      return \"\".concat(cartItem.name, \": \").concat(cartItem.quantity, \"\\n\");\n    }), \"\\n         \\nTotal:\").concat(total, \"\\n Delivery Method: \").concat(deliveryMethod, \" \\n \").concat(deliveryMethod === 'delivery' ? \"Delivery Address: \".concat(address.city, \", \").concat(address.address) : '');\n    fetch(\"\".concat(API_URL, \"}/orders\"), {\n      method: 'post',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        Status: \"Pending\",\n        name: currentUser.email,\n        createdAt: new Date(),\n        OrderDetails: order\n      })\n    }).then(function (response) {\n      console.log(response);\n\n      if (response.ok) {\n        clearCart();\n        alert('Order successfully created');\n      } else {\n        alert('There was an issue creating order, please contact Customer Support');\n      }\n    });\n  };\n\n  return __jsx(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"payment-page-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"payment-page-main-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"payment-method-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    className: \"payment-method-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"Choose payment method\"), __jsx(\"form\", {\n    className: \"payment-method-form\",\n    onChange: onMethodFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"cash\",\n    name: \"payment-method\",\n    className: \"payment-method-radio\",\n    id: \"payment-method-cash\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }), __jsx(\"label\", {\n    \"for\": \"payment-method-cash\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, \"Pay with Cash\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"card\",\n    name: \"payment-method\",\n    className: \"payment-method-radio\",\n    id: \"payment-method-card\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }), __jsx(\"label\", {\n    \"for\": \"payment-method-card\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, \"Pay online using card\")))), __jsx(\"div\", {\n    className: \"delivery-method-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    className: \"delivery-method-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, \"Choose delivery method\"), __jsx(\"form\", {\n    className: \"delivery-method-form\",\n    onChange: onDeliveryFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"delivery\",\n    name: \"delivery-method\",\n    className: \"delivery-method-radio\",\n    id: \"delivery-method-delivery\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }), __jsx(\"label\", {\n    \"for\": \"delivery-method-delivery\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, \"Delivery\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"pickup\",\n    name: \"delivery-method\",\n    className: \"delivery-method-radio\",\n    id: \"delivery-method-pickup\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }), __jsx(\"label\", {\n    \"for\": \"delivery-method-pickup\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, \"Pickup\"))), deliveryMethod !== 'delivery' ? null : __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, address === '' && hiddenAddressForm ? __jsx(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return setHiddenAddressForm(false);\n    },\n    className: \"delivery-address-add-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, \"Add Delivery Address\") : __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, \"Delivery Address\"), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, \"City: \", address.city), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  }, \"Address: \", address.address), __jsx(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return setHiddenAddressForm(false);\n    },\n    className: \"delivery-address-change-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, \"Change\")))), hiddenAddressForm ? null : __jsx(\"div\", {\n    className: \"delivery-address-form-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, __jsx(\"form\", {\n    className: \"delivery-address-form\",\n    onSubmit: onAddressSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }, __jsx(FormInput, {\n    label: \"City\",\n    type: \"text\",\n    value: deliveryAddress.city,\n    name: \"city\",\n    handleChange: onDeliveryAddressChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 33\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 33\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: deliveryAddress.address,\n    name: \"address\",\n    className: \"delivery-address-address\",\n    id: \"delivery-address-address\",\n    onChange: onDeliveryAddressChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 33\n    }\n  }), __jsx(\"label\", {\n    \"for\": \"delivery-address-address\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 33\n    }\n  }, \"Address\")), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 33\n    }\n  }, \"Save Address\"))), payMethod === 'card' && deliveryMethod === 'pickup' || payMethod === 'card' && deliveryMethod === 'delivery' && address !== '' ? __jsx(StripeButton, {\n    currentUser: currentUser,\n    price: total,\n    cartItems: cartItems,\n    deliveryMethod: deliveryMethod,\n    deliveryAddress: address,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }) : null, payMethod === 'cash' && deliveryMethod === 'pickup' || payMethod === 'cash' && deliveryMethod === 'delivery' && address !== '' ? __jsx(\"button\", {\n    type: \"button\",\n    onClick: onCreateOrder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"Create order\") : null), __jsx(\"div\", {\n    className: \"payment-page-cart-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    className: \"payment-page-cart-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \"Your cart\"), __jsx(ScrollBar, {\n    style: {\n      height: '280px',\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, cartItems.length ? cartItems.map(function (cartItem) {\n    return __jsx(CartItem, {\n      key: cartItem.id,\n      cartItem: cartItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 47\n      }\n    });\n  }) : __jsx(\"span\", {\n    className: \"empty-message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, \"Your cart is empty\")), __jsx(\"div\", {\n    className: \"payment-page-cart-total\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, \"Total: $\", total)))), __jsx(Footer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(PaymentPage, \"nXWS2D8zx/zXywb3jyd/YgxXgZ8=\");\n\n_c = PaymentPage;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cartItems: state.cart.cartItems,\n    currentUser: state.user.currentUser,\n    total: state.cart.cartItems.reduce(function (sum, cartItem) {\n      return sum + cartItem.price * cartItem.quantity;\n    }, 0)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clearCart: function clearCart() {\n      return dispatch(_clearCart());\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PaymentPage));\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/pages/payment.js"],"names":["React","useEffect","useState","Fragment","Router","withRouter","connect","CartItem","StripeButton","Footer","API_URL","clearCart","ScrollBar","FormInput","PaymentPage","currentUser","cartItems","total","payMethod","setPayMethod","deliveryMethod","setDeliveryMethod","city","address","deliveryAddress","setDeliveryAddress","setAddress","hiddenAddressForm","setHiddenAddressForm","onMethodFormChange","event","target","value","onDeliveryFormChange","onDeliveryAddressChange","name","onAddressSubmit","preventDefault","onCreateOrder","order","map","cartItem","quantity","fetch","method","headers","body","JSON","stringify","Status","email","createdAt","Date","OrderDetails","then","response","console","log","ok","alert","height","width","length","id","mapStateToProps","state","cart","user","reduce","sum","price","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, Fragment} from 'react'\r\nimport Router, {withRouter} from 'next/router';\r\nimport {connect} from 'react-redux';\r\nimport CartItem from '../components/cart-item/cart-item.component'\r\nimport StripeButton from '../components/stripe-button/stripe-button.component'\r\nimport Footer from '../components/Footer/footer.component'\r\nimport API_URL from '../routes'\r\nimport {clearCart} from '../src/redux/cart/cart.actions'\r\nimport ScrollBar from 'react-scrollbars-custom'\r\nimport FormInput from '../components/FormInput/formInput.component'\r\n\r\nconst PaymentPage =({currentUser, cartItems, total, clearCart}) => {\r\n    const [payMethod, setPayMethod] = useState('')\r\n    const [deliveryMethod, setDeliveryMethod] = useState('')\r\n    const [deliveryAddress, setDeliveryAddress] = useState({city:'', address:''})\r\n    const [address, setAddress] = useState('')\r\n    const [hiddenAddressForm, setHiddenAddressForm] = useState(true)\r\n    // useEffect(()=>{\r\n    //     if (!currentUser) {\r\n    //         Router.back()\r\n    //     }\r\n    // })\r\n\r\n    const onMethodFormChange = (event) => {\r\n        setPayMethod(event.target.value)\r\n    }\r\n    const onDeliveryFormChange = (event) => {\r\n        setDeliveryMethod(event.target.value)\r\n    }\r\n    const onDeliveryAddressChange = (event) => {\r\n        const {name, value} = event.target\r\n        setDeliveryAddress({...deliveryAddress,[name]:value})\r\n    }\r\n    const onAddressSubmit = (event) => {\r\n        event.preventDefault()\r\n        setAddress({city:deliveryAddress.city,address:deliveryAddress.address})\r\n        setHiddenAddressForm(true)\r\n    }\r\n    const onCreateOrder = () => {\r\n        const order = `${cartItems.map(cartItem=>`${cartItem.name}: ${cartItem.quantity}\\n`)}\r\n         \\nTotal:${total}\\n Delivery Method: ${deliveryMethod} \\n ${deliveryMethod==='delivery'?`Delivery Address: ${address.city}, ${address.address}`:''}`\r\n        fetch(`${API_URL}}/orders`,{\r\n            method: 'post',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify({\r\n                Status: \"Pending\",\r\n                name: currentUser.email,\r\n                createdAt: new Date(),\r\n                OrderDetails: order,\r\n            })            \r\n        }).then(response => {\r\n        console.log(response)\r\n        if(response.ok){\r\n            clearCart()\r\n            alert('Order successfully created')   \r\n        }\r\n            else {\r\n                alert('There was an issue creating order, please contact Customer Support')\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        \r\n        <Fragment>\r\n        <div className='payment-page-container'>\r\n            <div className='payment-page-main-content'>\r\n\r\n                <div className='payment-method-container'>  \r\n                    <p className='payment-method-title'>Choose payment method</p>\r\n                    <form className='payment-method-form' onChange={onMethodFormChange}>\r\n                        <div>\r\n                        <input type='radio' value='cash' name='payment-method' className='payment-method-radio' id = 'payment-method-cash'/>\r\n                        <label for='payment-method-cash'>Pay with Cash</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type='radio' value='card' name='payment-method' className='payment-method-radio' id = 'payment-method-card'/>\r\n                        <label for='payment-method-card'>Pay online using card</label>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div className='delivery-method-container'>  \r\n                    <p className='delivery-method-title'>Choose delivery method</p>\r\n                    <form className='delivery-method-form' onChange={onDeliveryFormChange}>\r\n                        <div>\r\n                        <input type='radio' value='delivery' name='delivery-method' className='delivery-method-radio' id = 'delivery-method-delivery'/>\r\n                        <label for='delivery-method-delivery'>Delivery</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type='radio' value='pickup' name='delivery-method' className='delivery-method-radio' id = 'delivery-method-pickup'/>\r\n                        <label for='delivery-method-pickup'>Pickup</label>\r\n                        </div>\r\n                    </form>\r\n                    {\r\n                    deliveryMethod!=='delivery'?\r\n                    null:\r\n                    <div>\r\n                    {address===''&&hiddenAddressForm?\r\n                    <button type='button' \r\n                    onClick={()=>setHiddenAddressForm(false)} \r\n                    className='delivery-address-add-button'>\r\n                        Add Delivery Address\r\n                    </button>\r\n                    :\r\n                    <div>\r\n                        <p>Delivery Address</p>\r\n                        <span>City: {address.city}</span>\r\n                        <span>Address: {address.address}</span>\r\n                        <button type='button' onClick={()=>setHiddenAddressForm(false)} className='delivery-address-change-button'>Change</button>\r\n                    </div>}\r\n\r\n                    </div>\r\n                }\r\n                </div>\r\n                \r\n                { hiddenAddressForm?null\r\n                        :\r\n                        <div className='delivery-address-form-container'>\r\n                            <form className='delivery-address-form' onSubmit={onAddressSubmit}>\r\n                                <FormInput label='City' type='text' value={deliveryAddress.city} name='city'  handleChange={onDeliveryAddressChange} required/>\r\n\r\n                                <div>\r\n                                <input type='text' value={deliveryAddress.address} name='address' className='delivery-address-address' id='delivery-address-address' onChange={onDeliveryAddressChange} required/>\r\n                                <label for='delivery-address-address'>Address</label>\r\n                                </div>\r\n                                <button type='submit'>Save Address</button>\r\n                            </form>\r\n                        </div>\r\n                        }\r\n                \r\n                {\r\n                    payMethod==='card'&&deliveryMethod==='pickup' || payMethod==='card'&&deliveryMethod==='delivery'&&address!==''?\r\n                    <StripeButton currentUser={currentUser} price={total} cartItems={cartItems} deliveryMethod={deliveryMethod} deliveryAddress={address}/>\r\n                    :null\r\n                }\r\n                {\r\n                    payMethod==='cash'&&deliveryMethod==='pickup' || payMethod==='cash'&&deliveryMethod==='delivery'&&address!==''?\r\n                    <button type='button' onClick={onCreateOrder}>Create order</button>\r\n                    :null\r\n                }\r\n            </div>\r\n            <div className='payment-page-cart-container'>\r\n                <p className='payment-page-cart-title'>Your cart</p>\r\n                <ScrollBar  style={{height:'280px', width: '100%'}}>\r\n                {\r\n                    cartItems.length ?\r\n                    cartItems.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem}/>)\r\n                    : \r\n                    <span className='empty-message'>Your cart is empty</span>\r\n                \r\n                }\r\n                </ScrollBar>\r\n                <div className='payment-page-cart-total'>\r\n                    <span>Total: ${total}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <Footer/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    cartItems: state.cart.cartItems,\r\n    currentUser: state.user.currentUser,\r\n    total: state.cart.cartItems.reduce((sum, cartItem) => \r\n    sum + cartItem.price*cartItem.quantity, 0\r\n    )\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    clearCart: () => dispatch(clearCart())\r\n})\r\n\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PaymentPage));"]},"metadata":{},"sourceType":"module"}