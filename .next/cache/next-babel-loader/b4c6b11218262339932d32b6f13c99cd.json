{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Fragment } from 'react';\nimport AreaInput from '../AreaInput/area-input.component';\nimport { sendMessage } from '../../firebase/firebase.utils';\nimport { connect } from 'react-redux';\nimport { setMessages as _setMessages, setNewMessages as _setNewMessages, toggleChatHidden as _toggleChatHidden } from '../../src/redux/chat/chat.actions';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { motion } from 'framer-motion';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport ClickOutside from '../ClickOutside/ClickOutside.component';\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"unsubscribe\", function (channel) {\n      if (!firebase.apps.length) {\n        firebase.initializeApp({\n          apiKey: \"AIzaSyABugTRykVjU3cO3nkANbnArtyZ_TPix1Q\",\n          authDomain: \"raspberry-dacc1.firebaseapp.com\",\n          databaseURL: \"https://raspberry-dacc1.firebaseio.com\",\n          projectId: \"raspberry-dacc1\",\n          storageBucket: \"raspberry-dacc1.appspot.com\",\n          messagingSenderId: \"435336134829\",\n          appId: \"1:435336134829:web:36258d0b8bdb9bf9810624\",\n          measurementId: \"G-E4XKDDZNWV\"\n        });\n      }\n\n      firebase.firestore().collection('Chat').doc(\"\".concat(channel)).collection(\"messages\").where('createdAt', '>', 1590246123874).orderBy('createdAt', 'desc').onSnapshot(function (docs) {\n        var messages = [];\n        docs.forEach(function (doc) {\n          messages.push(doc.data());\n        });\n\n        _this.props.setMessages(messages);\n\n        _this.props.setNewMessages(true);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"listener\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var userRef;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(event.code === \"Enter\" || event.code === \"NumpadEnter\")) {\n                  _context.next = 6;\n                  break;\n                }\n\n                console.log(\"Enter key was pressed. Run your function.\");\n                _context.next = 4;\n                return sendMessage(_this.state.text, _this.props.channel);\n\n              case 4:\n                userRef = _context.sent;\n\n                _this.setState({\n                  text: ''\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var userRef;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                _context2.next = 3;\n                return sendMessage(_this.state.text, _this.props.channel);\n\n              case 3:\n                userRef = _context2.sent;\n\n                _this.setState({\n                  text: ''\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      _this.setState({\n        text: event.target.value\n      });\n    });\n\n    _this.state = {\n      text: ''\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var channel = this.props.channel;\n      this.unsubscribe(channel);\n      document.addEventListener(\"keydown\", this.listener);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"keydown\", this.listener);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          messages = _this$props.messages,\n          channel = _this$props.channel,\n          toggleChatHidden = _this$props.toggleChatHidden,\n          setNewMessages = _this$props.setNewMessages;\n      return __jsx(motion.div, {\n        initial: \"initial\",\n        animate: \"animate\"\n      }, __jsx(ClickOutside, {\n        onClick: function onClick() {\n          toggleChatHidden();\n          setNewMessages(false);\n        }\n      }, __jsx(motion.div, {\n        initial: {\n          width: '0px',\n          opacity: 0\n        },\n        animate: {\n          width: '336px',\n          opacity: 1,\n          transition: {\n            duration: 0.3,\n            staggerChildren: 0.09\n          }\n        },\n        className: \"chat-container\"\n      }, __jsx(\"div\", {\n        className: \"chat-title\"\n      }, __jsx(\"p\", null, \"Company Name\")), __jsx(\"div\", {\n        className: \"messages-container\"\n      }, messages ? messages.map(function (message) {\n        return __jsx(motion.div, {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1,\n            transition: {\n              delay: 0.1,\n              duration: 0.8\n            }\n          },\n          className: \"\".concat(message.user.id === channel ? 'message-user' : 'message-support', \" chat-message\")\n        }, message.text);\n      }) : null), __jsx(\"form\", {\n        onSubmit: this.handleSubmit\n      }, __jsx(AreaInput, {\n        className: \"message-box\",\n        name: \"text\",\n        handleChange: this.handleChange,\n        value: this.state.text,\n        placeholder: \"Type your message here...\",\n        required: true\n      }), __jsx(\"button\", {\n        className: \"message-send-button\",\n        type: \"submit\"\n      }, __jsx(FontAwesomeIcon, {\n        className: \"message-send-button-icon\",\n        icon: faArrowUp,\n        size: \"lg\"\n      }))))));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messages: state.chat.messages,\n    channel: state.chat.channel,\n    chatHidden: state.chat.chatHidden\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setMessages: function setMessages(messages) {\n      return dispatch(_setMessages(messages));\n    },\n    setNewMessages: function setNewMessages(bool) {\n      return dispatch(_setNewMessages(bool));\n    },\n    toggleChatHidden: function toggleChatHidden() {\n      return dispatch(_toggleChatHidden());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","map":null,"metadata":{},"sourceType":"module"}