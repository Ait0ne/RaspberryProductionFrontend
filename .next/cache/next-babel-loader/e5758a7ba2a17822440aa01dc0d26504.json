{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Card from '../Card/card.component';\nimport Pagination from 'react-js-pagination';\nimport Select from 'react-select';\nimport customStyles from './gallery.styles';\nimport { connect } from 'react-redux';\nimport { setCurrentPage } from '../../src/redux/pagination/pagination.action';\nimport { setCurrentFilter } from '../../src/redux/filter/filter.action';\nimport { setCurrentSort } from '../../src/redux/sort/sort.action';\nimport { motion } from 'framer-motion';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentFilter: state.filter.currentFilter,\n    sorted: state.sort.sorted,\n    activePage: state.pagination.activePage,\n    perPage: state.pagination.perPage,\n    pageRange: state.pagination.pageRange\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    handlePageChange: function handlePageChange(pageNumber) {\n      return dispatch(setCurrentPage(pageNumber));\n    },\n    onSortChange: function onSortChange(selectedOption) {\n      dispatch(setCurrentSort(selectedOption.value));\n      dispatch(setCurrentPage(1));\n    },\n    onSelectChange: function onSelectChange(selectedOption) {\n      if (selectedOption.value === 'All') {\n        return dispatch(setCurrentFilter(''));\n      } else {\n        dispatch(setCurrentFilter(selectedOption.value));\n        dispatch(setCurrentPage(1));\n      }\n    }\n  };\n};\n\nvar Gallery = /*#__PURE__*/function (_React$Component) {\n  _inherits(Gallery, _React$Component);\n\n  var _super = _createSuper(Gallery);\n\n  function Gallery() {\n    var _this;\n\n    _classCallCheck(this, Gallery);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectChange\", function (selectedOption) {\n      if (selectedOption.value === 'All') {\n        setCurrentFilter('');\n      } else {\n        setCurrentFilter(selectedOption.value);\n        setCurrentPage(1);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Gallery, [{\n    key: \"render\",\n    value: function render() {\n      var stagger = {\n        animate: {\n          transition: {\n            staggerChildren: 0.09\n          }\n        }\n      };\n      var _this$props = this.props,\n          currentFilter = _this$props.currentFilter,\n          sorted = _this$props.sorted,\n          activePage = _this$props.activePage,\n          perPage = _this$props.perPage,\n          pageRange = _this$props.pageRange,\n          onSortChange = _this$props.onSortChange,\n          handlePageChange = _this$props.handlePageChange,\n          onSelectChange = _this$props.onSelectChange;\n      var filteredItems = this.props.props.items.filter(function (item) {\n        return item.categories[0].name.includes(currentFilter);\n      });\n\n      if (sorted === 'Lower Price') {\n        filteredItems.sort(function (a, b) {\n          return a.price - b.price;\n        });\n      } else if (sorted === 'Higher Price') {\n        filteredItems.sort(function (a, b) {\n          return b.price - a.price;\n        });\n      } else if (sorted === 'Newest') {\n        filteredItems.sort(function (a, b) {\n          return new Date(b.date) - new Date(a.date);\n        });\n      }\n\n      var filterOptions = [{\n        value: 'All',\n        label: 'All'\n      }];\n      this.props.props.categories.map(function (category) {\n        filterOptions.push({\n          value: category.name,\n          label: category.name\n        });\n      });\n      var sortOptions = [{\n        value: 'Lower Price',\n        label: 'Lower Price'\n      }, {\n        value: 'Higher Price',\n        label: 'Higher Price'\n      }, {\n        value: 'Newest',\n        label: 'Newest'\n      }];\n      return __jsx(motion.div, {\n        className: \"gallery-container\"\n      }, __jsx(\"div\", {\n        className: \"filters\"\n      }, __jsx(\"div\", {\n        className: \"filter-selects\"\n      }, this.props.props.categories[0] ? __jsx(Select, {\n        styles: customStyles,\n        options: filterOptions,\n        onChange: onSelectChange,\n        placeholder: \"Category\",\n        isSearchable: false\n      }) : __jsx(\"option\", null, \"Loading\"), __jsx(Select, {\n        styles: customStyles,\n        options: sortOptions,\n        onChange: onSortChange,\n        placeholder: \"Sort\",\n        isSearchable: false\n      })), __jsx(\"span\", {\n        className: \"filters-range\"\n      }, __jsx(\"span\", {\n        className: \"filter-range-number\"\n      }, (activePage - 1) * perPage + 1), \"-\", __jsx(\"span\", {\n        className: \"filter-range-number\"\n      }, activePage * perPage > filteredItems.length ? filteredItems.length : activePage * perPage), \" out of\", __jsx(\"span\", {\n        className: \"filter-range-number\"\n      }, filteredItems.length), \" results\"), filteredItems.length > perPage ? __jsx(Pagination, {\n        activePage: activePage,\n        itemsCountPerPage: perPage,\n        totalItemsCount: filteredItems.length,\n        pageRangeDisplayed: pageRange,\n        onChange: handlePageChange.bind(this)\n      }) : ''), !this.props.props.items[0] ? __jsx(\"h1\", null, \"Loading\") : __jsx(motion.div, {\n        className: \"gallery\",\n        variants: stagger\n      }, filteredItems.slice((activePage - 1) * perPage, activePage * perPage).map(function (item, index) {\n        // return <Link href='itemgallery/[item]' as='itemgallery' passHref><Card key={id} id={id} name={name} {...otherProps}/></Link>\n        return __jsx(Card, {\n          key: item.id,\n          item: item,\n          index: index\n        });\n      })));\n    }\n  }]);\n\n  return Gallery;\n}(React.Component);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gallery);","map":null,"metadata":{},"sourceType":"module"}