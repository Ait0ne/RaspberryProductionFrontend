{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst INITIAL_STATE = {\n  channel: '',\n  messages: [],\n  newMessages: false,\n  chatHidden: true\n};\n\nconst chatReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'SET_MESSAGES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        messages: action.payload\n      });\n\n    case 'SET_CHANNEL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        channel: action.payload\n      });\n\n    case 'SET_NEW_MESSAGES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        newMessages: action.payload\n      });\n\n    case 'TOGGLE_CHAT_HIDDEN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatHidden: !state.chatHidden\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default chatReducer;","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/client/src/redux/chat/chat.reducers.js"],"names":["INITIAL_STATE","channel","messages","newMessages","chatHidden","chatReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,MAAMA,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE,EADS;AAElBC,EAAAA,QAAQ,EAAE,EAFQ;AAGlBC,EAAAA,WAAW,EAAE,KAHK;AAIlBC,EAAAA,UAAU,EAAC;AAJO,CAAtB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACN,aAAP,EAAsBO,MAAtB,KAAiC;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,cAAL;AACI,6CACOF,KADP;AAEIJ,QAAAA,QAAQ,EAAEK,MAAM,CAACE;AAFrB;;AAIJ,SAAK,aAAL;AACI,6CACOH,KADP;AAEIL,QAAAA,OAAO,EAAEM,MAAM,CAACE;AAFpB;;AAIJ,SAAK,kBAAL;AACI,6CACOH,KADP;AAEIH,QAAAA,WAAW,EAAEI,MAAM,CAACE;AAFxB;;AAIJ,SAAK,oBAAL;AACI,6CACOH,KADP;AAEIF,QAAAA,UAAU,EAAE,CAACE,KAAK,CAACF;AAFvB;;AAIJ;AACI,aAAOE,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["const INITIAL_STATE = {\r\n    channel: '',\r\n    messages: [],\r\n    newMessages: false,\r\n    chatHidden:true,\r\n}\r\n\r\nconst chatReducer = (state=INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case 'SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: action.payload\r\n            }\r\n        case 'SET_CHANNEL':\r\n            return {\r\n                ...state,\r\n                channel: action.payload\r\n            }\r\n        case 'SET_NEW_MESSAGES':\r\n            return {\r\n                ...state,\r\n                newMessages: action.payload\r\n            }\r\n        case 'TOGGLE_CHAT_HIDDEN':\r\n            return {\r\n                ...state,\r\n                chatHidden: !state.chatHidden\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default chatReducer;"]},"metadata":{},"sourceType":"module"}