{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bonaf\\\\Desktop\\\\Projects\\\\Ecommerce\\\\Malinka\\\\frontend\\\\malinka\\\\pages\\\\payment.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport CartItem from '../components/cart-item/cart-item.component';\nimport StripeButton from '../components/stripe-button/stripe-button.component';\nimport Footer from '../components/Footer/footer.component';\nimport API_URL from '../routes';\nimport { clearCart } from '../src/redux/cart/cart.actions';\nimport ScrollBar from 'react-scrollbars-custom';\nimport FormInput from '../components/FormInput/formInput.component';\n\nconst PaymentPage = ({\n  currentUser,\n  cartItems,\n  total,\n  clearCart\n}) => {\n  const {\n    0: payMethod,\n    1: setPayMethod\n  } = useState('');\n  const {\n    0: deliveryMethod,\n    1: setDeliveryMethod\n  } = useState('');\n  const {\n    0: deliveryAddress,\n    1: setDeliveryAddress\n  } = useState({\n    city: '',\n    address: ''\n  });\n  const {\n    0: address,\n    1: setAddress\n  } = useState('');\n  const {\n    0: hiddenAddressForm,\n    1: setHiddenAddressForm\n  } = useState(true); // useEffect(()=>{\n  //     if (!currentUser) {\n  //         Router.back()\n  //     }\n  // })\n\n  const onMethodFormChange = event => {\n    setPayMethod(event.target.value);\n  };\n\n  const onDeliveryFormChange = event => {\n    setDeliveryMethod(event.target.value);\n  };\n\n  const onDeliveryAddressChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setDeliveryAddress(_objectSpread(_objectSpread({}, deliveryAddress), {}, {\n      [name]: value\n    }));\n  };\n\n  const onAddressSubmit = event => {\n    event.preventDefault();\n    setAddress({\n      city: deliveryAddress.city,\n      address: deliveryAddress.address\n    });\n    setHiddenAddressForm(true);\n  };\n\n  const onCreateOrder = () => {\n    const order = `${cartItems.map(cartItem => `${cartItem.name}: ${cartItem.quantity}\\n`)}\n         \\nTotal:${total}\\n Delivery Method: ${deliveryMethod} \\n ${deliveryMethod === 'delivery' ? `Delivery Address: ${address.city}, ${address.address}` : ''}`;\n    fetch(`${API_URL}}/orders`, {\n      method: 'post',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        Status: \"Pending\",\n        name: currentUser.email,\n        createdAt: new Date(),\n        OrderDetails: order\n      })\n    }).then(response => {\n      console.log(response);\n\n      if (response.ok) {\n        clearCart();\n        alert('Order successfully created');\n      } else {\n        alert('There was an issue creating order, please contact Customer Support');\n      }\n    });\n  };\n\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"payment-page-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"payment-page-main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"payment-method-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    className: \"payment-method-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"Choose payment method\"), __jsx(\"form\", {\n    className: \"payment-method-form\",\n    onChange: onMethodFormChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"cash\",\n    name: \"payment-method\",\n    className: \"payment-method-radio\",\n    id: \"payment-method-cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }), __jsx(\"label\", {\n    for: \"payment-method-cash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, \"Pay with Cash\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"card\",\n    name: \"payment-method\",\n    className: \"payment-method-radio\",\n    id: \"payment-method-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }), __jsx(\"label\", {\n    for: \"payment-method-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, \"Pay online using card\")))), __jsx(\"div\", {\n    className: \"delivery-method-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    className: \"delivery-method-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, \"Choose delivery method\"), __jsx(\"form\", {\n    className: \"delivery-method-form\",\n    onChange: onDeliveryFormChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"delivery\",\n    name: \"delivery-method\",\n    className: \"delivery-method-radio\",\n    id: \"delivery-method-delivery\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }), __jsx(\"label\", {\n    for: \"delivery-method-delivery\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, \"Delivery\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"pickup\",\n    name: \"delivery-method\",\n    className: \"delivery-method-radio\",\n    id: \"delivery-method-pickup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }), __jsx(\"label\", {\n    for: \"delivery-method-pickup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, \"Pickup\"))), deliveryMethod !== 'delivery' ? null : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, address === '' ? __jsx(\"button\", {\n    type: \"button\",\n    onClick: () => setHiddenAddressForm(false),\n    className: \"delivery-address-add-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, \"Add Delivery Address\") : __jsx(\"div\", {\n    className: \"delivery-address-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    className: \"delivery-address-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, \"Delivery Address\"), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  }, \"City: \", address.city), __jsx(\"span\", {\n    style: {\n      marginTop: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, \"Address: \", address.address)), __jsx(\"button\", {\n    type: \"button\",\n    onClick: () => setHiddenAddressForm(false),\n    className: \"delivery-address-add-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, \"Change\")))), hiddenAddressForm ? null : __jsx(\"div\", {\n    className: \"delivery-address-form-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 25\n    }\n  }, __jsx(\"form\", {\n    className: \"delivery-address-form\",\n    onSubmit: onAddressSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 29\n    }\n  }, __jsx(FormInput, {\n    label: \"City\",\n    type: \"text\",\n    value: deliveryAddress.city,\n    name: \"city\",\n    handleChange: onDeliveryAddressChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 33\n    }\n  }), __jsx(FormInput, {\n    label: \"Address\",\n    type: \"text\",\n    value: deliveryAddress.address,\n    name: \"address\",\n    handleChange: onDeliveryAddressChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 33\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"delivery-address-add-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 33\n    }\n  }, \"Save Address\"))), payMethod === 'card' && deliveryMethod === 'pickup' && total > 0 || payMethod === 'card' && deliveryMethod === 'delivery' && address !== '' && total > 0 ? __jsx(StripeButton, {\n    currentUser: currentUser,\n    price: total,\n    cartItems: cartItems,\n    deliveryMethod: deliveryMethod,\n    deliveryAddress: address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }) : null, payMethod === 'cash' && deliveryMethod === 'pickup' && total > 0 || payMethod === 'cash' && deliveryMethod === 'delivery' && address !== '' && total > 0 ? __jsx(\"button\", {\n    type: \"button\",\n    onClick: onCreateOrder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, \"Create order\") : null), __jsx(\"div\", {\n    className: \"payment-page-cart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    className: \"payment-page-cart-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"Your cart\"), __jsx(ScrollBar, {\n    style: {\n      height: '280px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, cartItems.length ? cartItems.map(cartItem => __jsx(CartItem, {\n    key: cartItem.id,\n    cartItem: cartItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 47\n    }\n  })) : __jsx(\"span\", {\n    className: \"empty-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, \"Your cart is empty\")), __jsx(\"div\", {\n    className: \"payment-page-cart-total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, \"Total: $\", total)))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  cartItems: state.cart.cartItems,\n  currentUser: state.user.currentUser,\n  total: state.cart.cartItems.reduce((sum, cartItem) => sum + cartItem.price * cartItem.quantity, 0)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  clearCart: () => dispatch(clearCart())\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PaymentPage));","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/pages/payment.js"],"names":["React","useEffect","useState","Fragment","Router","withRouter","connect","CartItem","StripeButton","Footer","API_URL","clearCart","ScrollBar","FormInput","PaymentPage","currentUser","cartItems","total","payMethod","setPayMethod","deliveryMethod","setDeliveryMethod","deliveryAddress","setDeliveryAddress","city","address","setAddress","hiddenAddressForm","setHiddenAddressForm","onMethodFormChange","event","target","value","onDeliveryFormChange","onDeliveryAddressChange","name","onAddressSubmit","preventDefault","onCreateOrder","order","map","cartItem","quantity","fetch","method","headers","body","JSON","stringify","Status","email","createdAt","Date","OrderDetails","then","response","console","log","ok","alert","display","flexDirection","marginTop","height","width","length","id","mapStateToProps","state","cart","user","reduce","sum","price","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, Fragment} from 'react'\r\nimport Router, {withRouter} from 'next/router';\r\nimport {connect} from 'react-redux';\r\nimport CartItem from '../components/cart-item/cart-item.component'\r\nimport StripeButton from '../components/stripe-button/stripe-button.component'\r\nimport Footer from '../components/Footer/footer.component'\r\nimport API_URL from '../routes'\r\nimport {clearCart} from '../src/redux/cart/cart.actions'\r\nimport ScrollBar from 'react-scrollbars-custom'\r\nimport FormInput from '../components/FormInput/formInput.component'\r\n\r\nconst PaymentPage =({currentUser, cartItems, total, clearCart}) => {\r\n    const [payMethod, setPayMethod] = useState('')\r\n    const [deliveryMethod, setDeliveryMethod] = useState('')\r\n    const [deliveryAddress, setDeliveryAddress] = useState({city:'', address:''})\r\n    const [address, setAddress] = useState('')\r\n    const [hiddenAddressForm, setHiddenAddressForm] = useState(true)\r\n    // useEffect(()=>{\r\n    //     if (!currentUser) {\r\n    //         Router.back()\r\n    //     }\r\n    // })\r\n\r\n    const onMethodFormChange = (event) => {\r\n        setPayMethod(event.target.value)\r\n    }\r\n    const onDeliveryFormChange = (event) => {\r\n        setDeliveryMethod(event.target.value)\r\n    }\r\n    const onDeliveryAddressChange = (event) => {\r\n        const {name, value} = event.target\r\n        setDeliveryAddress({...deliveryAddress,[name]:value})\r\n    }\r\n    const onAddressSubmit = (event) => {\r\n        event.preventDefault()\r\n        setAddress({city:deliveryAddress.city,address:deliveryAddress.address})\r\n        setHiddenAddressForm(true)\r\n    }\r\n    const onCreateOrder = () => {\r\n        const order = `${cartItems.map(cartItem=>`${cartItem.name}: ${cartItem.quantity}\\n`)}\r\n         \\nTotal:${total}\\n Delivery Method: ${deliveryMethod} \\n ${deliveryMethod==='delivery'?`Delivery Address: ${address.city}, ${address.address}`:''}`\r\n        fetch(`${API_URL}}/orders`,{\r\n            method: 'post',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify({\r\n                Status: \"Pending\",\r\n                name: currentUser.email,\r\n                createdAt: new Date(),\r\n                OrderDetails: order,\r\n            })            \r\n        }).then(response => {\r\n        console.log(response)\r\n        if(response.ok){\r\n            clearCart()\r\n            alert('Order successfully created')   \r\n        }\r\n            else {\r\n                alert('There was an issue creating order, please contact Customer Support')\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        \r\n        <Fragment>\r\n        <div className='payment-page-container'>\r\n            <div className='payment-page-main-content'>\r\n\r\n                <div className='payment-method-container'>  \r\n                    <p className='payment-method-title'>Choose payment method</p>\r\n                    <form className='payment-method-form' onChange={onMethodFormChange}>\r\n                        <div>\r\n                        <input type='radio' value='cash' name='payment-method' className='payment-method-radio' id = 'payment-method-cash'/>\r\n                        <label for='payment-method-cash'>Pay with Cash</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type='radio' value='card' name='payment-method' className='payment-method-radio' id = 'payment-method-card'/>\r\n                        <label for='payment-method-card'>Pay online using card</label>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div className='delivery-method-container'>  \r\n                    <p className='delivery-method-title'>Choose delivery method</p>\r\n                    <form className='delivery-method-form' onChange={onDeliveryFormChange}>\r\n                        <div>\r\n                        <input type='radio' value='delivery' name='delivery-method' className='delivery-method-radio' id = 'delivery-method-delivery'/>\r\n                        <label for='delivery-method-delivery'>Delivery</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type='radio' value='pickup' name='delivery-method' className='delivery-method-radio' id = 'delivery-method-pickup'/>\r\n                        <label for='delivery-method-pickup'>Pickup</label>\r\n                        </div>\r\n                    </form>\r\n                    {\r\n                    deliveryMethod!=='delivery'?\r\n                    null:\r\n                    <div>\r\n                    {address===''?\r\n                    <button type='button' \r\n                    onClick={()=>setHiddenAddressForm(false)} \r\n                    className='delivery-address-add-button'>\r\n                        Add Delivery Address\r\n                    </button>\r\n                    :\r\n                    <div className='delivery-address-info'>\r\n                        <p className='delivery-address-title'>Delivery Address</p>\r\n                        <div style={{display:'flex', flexDirection:'column'}}>\r\n                        <span>City: {address.city}</span>\r\n                        <span style={{marginTop:'5px'}}>Address: {address.address}</span>\r\n                        </div>\r\n                        <button type='button' onClick={()=>setHiddenAddressForm(false)} className='delivery-address-add-button'>Change</button>\r\n                    </div>}\r\n\r\n                    </div>\r\n                }\r\n                </div>\r\n                \r\n                { hiddenAddressForm?null\r\n                        :\r\n                        <div className='delivery-address-form-container'>\r\n                            <form className='delivery-address-form' onSubmit={onAddressSubmit}>\r\n                                <FormInput \r\n                                label='City' \r\n                                type='text' \r\n                                value={deliveryAddress.city} \r\n                                name='city'  \r\n                                handleChange={onDeliveryAddressChange} \r\n                                required\r\n                                />\r\n                                <FormInput \r\n                                label='Address'\r\n                                type='text'\r\n                                value={deliveryAddress.address}\r\n                                name='address'\r\n                                handleChange={onDeliveryAddressChange} \r\n                                required\r\n                                />                                \r\n                                <button type='submit' className='delivery-address-add-button'>Save Address</button>\r\n                            </form>\r\n                        </div>\r\n                        }\r\n                \r\n                {\r\n                    payMethod==='card'&&deliveryMethod==='pickup'&&total>0 || payMethod==='card'&&deliveryMethod==='delivery'&&address!==''&&total>0?\r\n                    <StripeButton currentUser={currentUser} price={total} cartItems={cartItems} deliveryMethod={deliveryMethod} deliveryAddress={address}/>\r\n                    :null\r\n                }\r\n                {\r\n                    payMethod==='cash'&&deliveryMethod==='pickup'&&total>0 || payMethod==='cash'&&deliveryMethod==='delivery'&&address!==''&&total>0?\r\n                    <button type='button' onClick={onCreateOrder}>Create order</button>\r\n                    :null\r\n                }\r\n            </div>\r\n            <div className='payment-page-cart-container'>\r\n                <p className='payment-page-cart-title'>Your cart</p>\r\n                <ScrollBar  style={{height:'280px', width: '100%'}}>\r\n                {\r\n                    cartItems.length ?\r\n                    cartItems.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem}/>)\r\n                    : \r\n                    <span className='empty-message'>Your cart is empty</span>\r\n                \r\n                }\r\n                </ScrollBar>\r\n                <div className='payment-page-cart-total'>\r\n                    <span>Total: ${total}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <Footer/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    cartItems: state.cart.cartItems,\r\n    currentUser: state.user.currentUser,\r\n    total: state.cart.cartItems.reduce((sum, cartItem) => \r\n    sum + cartItem.price*cartItem.quantity, 0\r\n    )\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    clearCart: () => dispatch(clearCart())\r\n})\r\n\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PaymentPage));"]},"metadata":{},"sourceType":"module"}