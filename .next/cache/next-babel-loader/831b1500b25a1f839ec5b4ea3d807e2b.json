{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment } from 'react';\nimport AreaInput from '../AreaInput/area-input.component';\nimport { sendMessage } from '../../firebase/firebase.utils';\nimport { connect } from 'react-redux';\nimport { setMessages, setNewMessages, toggleChatHidden } from '../../src/redux/chat/chat.actions';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { motion } from 'framer-motion';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport ClickOutside from '../ClickOutside/ClickOutside.component';\n\nclass Chat extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"unsubscribe\", channel => {\n      if (!firebase.apps.length) {\n        firebase.initializeApp({\n          apiKey: \"AIzaSyABugTRykVjU3cO3nkANbnArtyZ_TPix1Q\",\n          authDomain: \"raspberry-dacc1.firebaseapp.com\",\n          databaseURL: \"https://raspberry-dacc1.firebaseio.com\",\n          projectId: \"raspberry-dacc1\",\n          storageBucket: \"raspberry-dacc1.appspot.com\",\n          messagingSenderId: \"435336134829\",\n          appId: \"1:435336134829:web:36258d0b8bdb9bf9810624\",\n          measurementId: \"G-E4XKDDZNWV\"\n        });\n      }\n\n      firebase.firestore().collection('Chat').doc(`${channel}`).collection(`messages`).where('createdAt', '>', 1590246123874).orderBy('createdAt', 'desc').onSnapshot(docs => {\n        const messages = [];\n        docs.forEach(function (doc) {\n          messages.push(doc.data());\n        });\n        this.props.setMessages(messages);\n        this.props.setNewMessages(true);\n      });\n    });\n\n    _defineProperty(this, \"listener\", async event => {\n      if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n        console.log(\"Enter key was pressed. Run your function.\");\n        const userRef = await sendMessage(this.state.text, this.props.channel);\n        this.setState({\n          text: ''\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleSubmit\", async event => {\n      event.preventDefault();\n      const userRef = await sendMessage(this.state.text, this.props.channel);\n      this.setState({\n        text: ''\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        text: event.target.value\n      });\n    });\n\n    this.state = {\n      text: ''\n    };\n  }\n\n  componentDidMount() {\n    const {\n      channel\n    } = this.props;\n    this.unsubscribe(channel);\n    document.addEventListener(\"keydown\", this.listener);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.listener);\n  }\n\n  render() {\n    const {\n      messages,\n      channel,\n      toggleChatHidden,\n      setNewMessages\n    } = this.props;\n    return __jsx(motion.div, {\n      initial: \"initial\",\n      animate: \"animate\"\n    }, __jsx(ClickOutside, {\n      onClick: () => {\n        toggleChatHidden();\n        setNewMessages(false);\n      }\n    }, __jsx(motion.div, {\n      initial: {\n        width: '0px',\n        opacity: 0\n      },\n      animate: {\n        width: '336px',\n        opacity: 1,\n        transition: {\n          duration: 0.3,\n          staggerChildren: 0.09\n        }\n      },\n      className: \"chat-container\"\n    }, __jsx(\"div\", {\n      className: \"chat-title\"\n    }, __jsx(\"p\", null, \"Company Name\")), __jsx(\"div\", {\n      className: \"messages-container\"\n    }, messages ? messages.map(message => __jsx(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1,\n        transition: {\n          delay: 0.1,\n          duration: 0.8\n        }\n      },\n      className: `${message.user.id === channel ? 'message-user' : 'message-support'} chat-message`\n    }, message.text)) : null), __jsx(\"form\", {\n      onSubmit: this.handleSubmit\n    }, __jsx(AreaInput, {\n      className: \"message-box\",\n      name: \"text\",\n      handleChange: this.handleChange,\n      value: this.state.text,\n      placeholder: \"Type your message here...\",\n      required: true\n    }), __jsx(\"button\", {\n      className: \"message-send-button\",\n      type: \"submit\"\n    }, __jsx(FontAwesomeIcon, {\n      className: \"message-send-button-icon\",\n      icon: faArrowUp,\n      size: \"lg\"\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  messages: state.chat.messages,\n  channel: state.chat.channel,\n  chatHidden: state.chat.chatHidden\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setMessages: messages => dispatch(setMessages(messages)),\n  setNewMessages: bool => dispatch(setNewMessages(bool)),\n  toggleChatHidden: () => dispatch(toggleChatHidden())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","map":null,"metadata":{},"sourceType":"module"}