{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bonaf\\\\Desktop\\\\Projects\\\\Ecommerce\\\\Malinka\\\\frontend\\\\malinka\\\\client\\\\components\\\\stripe-button\\\\stripe-button.component.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\nimport API_URL from '../../routes';\nimport { connect } from 'react-redux';\nimport { clearCart } from '../../src/redux/cart/cart.actions';\n\nconst StripeCheckoutButton = ({\n  price,\n  currentUser,\n  cartItems\n}) => {\n  const order = `${cartItems.map(cartItem => `${cartItem.name}: ${cartItem.quantity}\\n`)}`;\n\n  const onToken = token => {\n    fetch(`http://localhost:1337/orders`, {\n      method: 'post',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: priceForStripe,\n        Status: \"Pending\",\n        name: currentUser.email,\n        createdAt: new Date(),\n        OrderDetails: order,\n        token\n      })\n    }).then(response => {\n      alert('Payment successful');\n      console.log(response);\n    }).catch(error => {\n      console.log('Payment error: ', error);\n      alert('There was an issue with your payment.');\n    });\n  };\n\n  const priceForStripe = price * 100;\n  const publishablekey = 'pk_test_cjTqGCwCgH7H6f2eJRaVcr5R00XHFNsn39';\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      alignSelf: 'flex-end',\n      marginTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(StripeCheckout, {\n    label: \"Pay Now\",\n    name: \"TestShop\",\n    billingAddress: true,\n    shippingAddress: true,\n    description: `Your total is ${price}`,\n    amount: priceForStripe,\n    panelLabel: \"Pay Now\",\n    token: onToken,\n    stripeKey: publishablekey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  clearCart: () => dispatch(clearCart())\n});\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/client/components/stripe-button/stripe-button.component.jsx"],"names":["React","StripeCheckout","axios","API_URL","connect","clearCart","StripeCheckoutButton","price","currentUser","cartItems","order","map","cartItem","name","quantity","onToken","token","fetch","method","headers","body","JSON","stringify","amount","priceForStripe","Status","email","createdAt","Date","OrderDetails","then","response","alert","console","log","catch","error","publishablekey","display","alignSelf","marginTop","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,QAAwB,mCAAxB;;AAEA,MAAMC,oBAAoB,GAAG,CAAE;AAAEC,EAAAA,KAAF;AAASC,EAAAA,WAAT;AAAsBC,EAAAA;AAAtB,CAAF,KAAyC;AAClE,QAAMC,KAAK,GAAI,GAAED,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAG,GAAEA,QAAQ,CAACC,IAAK,KAAID,QAAQ,CAACE,QAAS,IAA/D,CAAoE,EAArF;;AACA,QAAMC,OAAO,GAAGC,KAAK,IAAI;AACrBC,IAAAA,KAAK,CAAE,8BAAF,EAAgC;AAC7BC,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAFoB;AAG7BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,MAAM,EAAEC,cADS;AAEjBC,QAAAA,MAAM,EAAE,SAFS;AAGjBZ,QAAAA,IAAI,EAAEL,WAAW,CAACkB,KAHD;AAIjBC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,EAJM;AAKjBC,QAAAA,YAAY,EAAEnB,KALG;AAMjBM,QAAAA;AANiB,OAAf;AAHuB,KAAhC,CAAL,CAYGc,IAZH,CAYQC,QAAQ,IAAI;AAChBC,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACH,KAfD,EAeGI,KAfH,CAeSC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,KAA/B;AACAJ,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACH,KAlBD;AAmBH,GApBD;;AAsBA,QAAMR,cAAc,GAAGjB,KAAK,GAAG,GAA/B;AAEA,QAAM8B,cAAc,GAAG,4CAAvB;AACA,SACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAE,MAAV;AAAiBC,MAAAA,SAAS,EAAC,UAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AACI,IAAA,KAAK,EAAG,SADZ;AAEI,IAAA,IAAI,EAAG,UAFX;AAGI,IAAA,cAAc,MAHlB;AAII,IAAA,eAAe,MAJnB;AAKI,IAAA,WAAW,EAAK,iBAAgBjC,KAAM,EAL1C;AAMI,IAAA,MAAM,EAAIiB,cANd;AAOI,IAAA,UAAU,EAAC,SAPf;AAQI,IAAA,KAAK,EAAET,OARX;AASI,IAAA,SAAS,EAAEsB,cATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAeH,CA1CD;;AA6CA,MAAMI,kBAAkB,GAAGC,QAAQ,KAAI;AACnCrC,EAAAA,SAAS,EAAE,MAAMqC,QAAQ,CAACrC,SAAS,EAAV;AADU,CAAJ,CAAnC;;AAIA,eAAeD,OAAO,CAAC,IAAD,EAAOqC,kBAAP,CAAP,CAAkCnC,oBAAlC,CAAf","sourcesContent":["import React from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport axios from 'axios';\r\nimport API_URL from '../../routes';\r\nimport {connect} from 'react-redux';\r\nimport {clearCart} from '../../src/redux/cart/cart.actions'\r\n\r\nconst StripeCheckoutButton = ( { price, currentUser, cartItems } ) => {\r\n    const order = `${cartItems.map(cartItem=>`${cartItem.name}: ${cartItem.quantity}\\n`)}`\r\n    const onToken = token => {\r\n        fetch(`http://localhost:1337/orders`,{\r\n                method: 'post',\r\n                headers: {'Content-type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    amount: priceForStripe,\r\n                    Status: \"Pending\",\r\n                    name: currentUser.email,\r\n                    createdAt: new Date(),\r\n                    OrderDetails: order,\r\n                    token\r\n                })\r\n                \r\n        }).then(response => {\r\n            alert('Payment successful')\r\n            console.log(response)\r\n        }).catch(error => {\r\n            console.log('Payment error: ', error)\r\n            alert('There was an issue with your payment.')\r\n        })\r\n    }\r\n\r\n    const priceForStripe = price * 100\r\n    \t\r\n    const publishablekey = 'pk_test_cjTqGCwCgH7H6f2eJRaVcr5R00XHFNsn39'\r\n    return (\r\n        <div style={{display: 'flex',alignSelf:'flex-end', marginTop:'20px'}}>\r\n            <StripeCheckout \r\n                label = 'Pay Now'\r\n                name = 'TestShop'\r\n                billingAddress\r\n                shippingAddress\r\n                description = {`Your total is ${price}`}\r\n                amount = {priceForStripe}\r\n                panelLabel='Pay Now'\r\n                token={onToken}\r\n                stripeKey={publishablekey}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch=> ({\r\n    clearCart: () => dispatch(clearCart())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton)"]},"metadata":{},"sourceType":"module"}