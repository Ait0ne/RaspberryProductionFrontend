{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst INITIAL_STATE = {\n  currentFilter: ''\n};\n\nconst filterReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'SET_CURRENT_FILTER':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentFilter: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/Malinka/frontend/malinka/src/redux/filter/filter.reducer.js"],"names":["INITIAL_STATE","currentFilter","filterReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,MAAMA,aAAa,GAAG;AAClBC,EAAAA,aAAa,EAAE;AADG,CAAtB;;AAKA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,oBAAL;AACI,6CACOF,KADP;AAEIF,QAAAA,aAAa,EAAEG,MAAM,CAACE;AAF1B;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAYA,eAAeD,aAAf","sourcesContent":["const INITIAL_STATE = {\r\n    currentFilter: ''\r\n} \r\n\r\n\r\nconst filterReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_FILTER':\r\n            return  {\r\n                ...state,\r\n                currentFilter: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filterReducer;"]},"metadata":{},"sourceType":"module"}